利用哨兵简化实现难度
 如果我们引入哨兵结点，在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫带头链表。相反，没有哨兵结点的链表就叫作不带头链表
 通过一个哨兵 a[n-1] = key，成功省掉了一个比较语句 i

边界条件处理
 如果链表为空时，代码是否能正常工作？
 如果链表只包含一个结点时，代码是否能正常工作？
 如果链表只包含两个结点时，代码是否能正常工作？
 代码逻辑在处理头结点和尾结点的时候，是否能正常工作？

5 个常见的链表操作
 单链表反转
 链表中环的检测
 两个有序的链表合并
 删除链表倒数第 n 个结点
 求链表的中间结点

哨兵可以理解为它可以减少特殊情况的判断，比如判空，比如判越界？