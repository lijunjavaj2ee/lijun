缓存:
 CPU缓存，数据库缓存，浏览器缓存

缓存策略：
 .先进先出FIFO（first in,first out）
 .最少使用策略LFU（least frequently used）
 .最近最少使用策略LRU（least recently used）

底层的存储结构
数组需要一块连续的内存空间来存储，对内存的要求比较高。
而链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用。

三种最常见的链表结构：
单链表，双向链表，循环链表

单链表：
 链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“结点”。
 后继指针next

 第一个结点叫作头结点，头结点用来记录链表的基地址
 最后一个结点叫作尾结点，指针不是指向下一个结点，而是指向一个空地址 NULL

循环链表：
 循环链表是一种特殊的单链表
 跟单链表唯一的区别就在尾结点，
  单链表的尾结点指针指向空地址
  循环链表的尾结点指针是指向链表的头结点

双向链表：
 前驱节点prev，后继节点next
 LinkedHashMap

数组与链表的区别：
 数组简单易用，在实现上使用的是连续的内存空间，可以借助 CPU 的缓存机制，预读数组中的数据，所以访问效率更高
 链表在内存中并不是连续存储，所以对 CPU 缓存不友好，没办法有效预读

 数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它，导致“内存不足（out of memory）”
 链表本身没有大小的限制，天然地支持动态扩容

 频繁的内存申请和释放，容易造成内存碎片，如果是 Java 语言，就有可能会导致频繁的 GC（Garbage Collection，垃圾回收）